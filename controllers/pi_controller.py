# controllers/pi_controller.py

from flask import Blueprint, request, jsonify, Response, session
import queue
import threading
import time
import base64
import os
import cloudinary
import cloudinary.uploader

from datetime import datetime
from threading import Lock
from models import db, Shot, TrainingSession, SessionStatus

# T·∫°o m·ªôt Blueprint m·ªõi cho c√°c ch·ª©c nƒÉng li√™n quan ƒë·∫øn Pi
pi_bp = Blueprint('pi_bp', __name__)

STATE_LOCK = Lock()

# ƒê√¢y s·∫Ω l√† n∆°i l∆∞u tr·ªØ x·∫° th·ªß ƒëang ho·∫°t ƒë·ªông, thay v√¨ d√πng session
ACTIVE_SHOOTER_STATE = {
    'session_id': None,
    'soldier_id': None
}
# --- C√°c bi·∫øn tr·∫°ng th√°i s·∫Ω ƒë∆∞·ª£c qu·∫£n l√Ω trong blueprint n√†y ---
COMMAND_QUEUE = queue.Queue(maxsize=10)
pi_connected = False
last_heartbeat = 0
CURRENT_PI_CONFIG = {'zoom': 1.0, 'center': None}
latest_processed_data = {
    'time': '--:--:--', 'target': 'Ch∆∞a c√≥ k·∫øt qu·∫£', 'score': '--.-',
    'image_data': 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII='
}

# --- L·ªõp qu·∫£n l√Ω Livestream ---
class LivestreamManager:
    def __init__(self):
        self.frame = None
        self.lock = threading.Lock()
    def update_frame(self, frame):
        with self.lock:
            self.frame = frame
    def generate_frames_for_client(self):
        while True:
            with self.lock:
                if self.frame is None:
                    time.sleep(0.1)
                    continue
                frame_to_send = self.frame
            try:
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + frame_to_send + b'\r\n')
                time.sleep(1/30)
            except GeneratorExit:
                return

livestream_manager = LivestreamManager()

# --- C√°c API giao ti·∫øp v·ªõi Pi v√† Frontend ---

@pi_bp.route('/video_upload', methods=['POST'])
def video_upload():
    global pi_connected, last_heartbeat
    livestream_manager.update_frame(request.data)
    last_heartbeat = time.time()
    pi_connected = True
    return ('', 204)

@pi_bp.route('/processed_data_upload', methods=['POST'])
def processed_data_upload():
    global latest_processed_data
    data = request.get_json()
    if not data:
        return jsonify({'status': 'error', 'message': 'Invalid data'}), 400

    # G√°n c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh v√†o d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
    data['shot_id'] = time.time()
    data['saved_to_db'] = False

    active_session_id = None
    active_soldier_id = None

    # B∆∞·ªõc 1: Kh√≥a v√† ƒë·ªçc tr·∫°ng th√°i hi·ªán t·∫°i m·ªôt c√°ch an to√†n
    with STATE_LOCK:
        active_session_id = ACTIVE_SHOOTER_STATE.get('session_id')
        active_soldier_id = ACTIVE_SHOOTER_STATE.get('soldier_id')
    
    # B∆∞·ªõc 2: Ch·ªâ x·ª≠ l√Ω n·∫øu c√≥ x·∫° th·ªß ƒëang ƒë∆∞·ª£c k√≠ch ho·∫°t
    if active_session_id and active_soldier_id:
        try:
            # B∆∞·ªõc 3: L·∫•y phi√™n t·ª´ DB v√† ki·ªÉm tra tr·∫°ng th√°i l·∫ßn cu·ªëi (l·ªõp b·∫£o v·ªá)
            current_session = db.session.get(TrainingSession, int(active_session_id))
            
            if current_session and current_session.status != SessionStatus.COMPLETED:
                # N·∫øu m·ªçi th·ª© h·ª£p l·ªá, ti·∫øn h√†nh t·∫°o v√† l∆∞u ƒë·ªëi t∆∞·ª£ng Shot
                image_data = data.get('image_data')
                image_url = None # S·∫Ω l∆∞u URL t·ª´ Cloudinary

                # <<< LOGIC UPLOAD ·∫¢NH M·ªöI >>>
                if image_data:
                    try:
                        # T·∫£i ·∫£nh l√™n Cloudinary
                        upload_result = cloudinary.uploader.upload(
                            base64.b64decode(image_data),
                            folder="shot_results" # T·∫°o m·ªôt th∆∞ m·ª•c tr√™n Cloudinary
                        )
                        image_url = upload_result.get('secure_url')
                        print(f"‚úÖ ƒê√£ t·∫£i ·∫£nh l√™n Cloudinary: {image_url}")
                    except Exception as e:
                        print(f"‚ùå L·ªói khi t·∫£i ·∫£nh l√™n Cloudinary: {e}")
                    

                new_shot = Shot(
                    session_id=active_session_id,
                    soldier_id=active_soldier_id,
                    score=data.get('score', 0),
                    target_name=data.get('target', 'Kh√¥ng x√°c ƒë·ªãnh'),
                    result_image_path=image_url
                )
                
                db.session.add(new_shot)
                db.session.commit()
                
                print(f"üíæ ƒê√£ l∆∞u l·∫ßn b·∫Øn v√†o database cho session {active_session_id}")
                data['saved_to_db'] = True # C·∫≠p nh·∫≠t c·ªù b√°o hi·ªáu ƒë√£ l∆∞u th√†nh c√¥ng
            else:
                status_str = "kh√¥ng t·ªìn t·∫°i" if not current_session else "ƒë√£ k·∫øt th√∫c"
                print(f"‚ö†Ô∏è T·ª´ ch·ªëi l∆∞u v√¨ phi√™n #{active_session_id} {status_str}.")

        except Exception as e:
            db.session.rollback()
            print(f"‚ùå L·ªói khi l∆∞u l·∫ßn b·∫Øn v√†o database: {e}")
    else:
        print("‚ö†Ô∏è Nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu b·∫Øn nh∆∞ng kh√¥ng l∆∞u v√¨ kh√¥ng c√≥ x·∫° th·ªß ƒë∆∞·ª£c k√≠ch ho·∫°t.")

    # C·∫≠p nh·∫≠t d·ªØ li·ªáu t·∫°m th·ªùi ƒë·ªÉ g·ª≠i v·ªÅ cho giao di·ªán
    latest_processed_data.update(data)
    
    return jsonify({'status': 'success'})

# <<< TH√äM L·∫†I: Route ƒë·ªÉ tr√¨nh duy·ªát l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t >>>
@pi_bp.route('/data_feed')
def data_feed():
    return jsonify(latest_processed_data)


@pi_bp.route('/connection-status')
def connection_status():
    global pi_connected, last_heartbeat
    if time.time() - last_heartbeat > 5:
        pi_connected = False
    return jsonify({'status': 'connected' if pi_connected else 'disconnected'})

@pi_bp.route('/video_feed')
def video_feed():
    if not pi_connected:
        return Response("<h1>Thi·∫øt b·ªã kh√¥ng k·∫øt n·ªëi</h1>", mimetype='text/html')
    return Response(livestream_manager.generate_frames_for_client(), mimetype='multipart/x-mixed-replace; boundary=frame')

@pi_bp.route('/report_config', methods=['POST'])
def report_config():
    global CURRENT_PI_CONFIG
    data = request.get_json()
    if data:
        CURRENT_PI_CONFIG.update(data)
        return jsonify({'status': 'success'})
    return jsonify({'status': 'error'}), 400

@pi_bp.route('/get_current_config')
def get_current_config():
    return jsonify(CURRENT_PI_CONFIG)

@pi_bp.route('/set_zoom', methods=['POST'])
def set_zoom():
    data = request.get_json()
    zoom_level = data.get('zoom')
    if zoom_level:
        command = {'type': 'zoom', 'value': zoom_level}
        try:
            COMMAND_QUEUE.put_nowait(command)
            return jsonify({'status': 'success'})
        except queue.Full:
            return jsonify({'status': 'error', 'message': 'H√†ng ƒë·ª£i l·ªánh ƒëang ƒë·∫ßy.'}), 503
    return jsonify({'status': 'error', 'message': 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.'}), 400
    
@pi_bp.route('/set_center', methods=['POST'])
def set_center():
    data = request.get_json()
    center_value = data.get('center')

    # N·∫øu gi√° tr·ªã l√† m·ªôt dictionary (ch·ª©a x, y) -> l·ªánh l·∫•y t·ª´ click chu·ªôt
    if isinstance(center_value, dict) and 'x' in center_value and 'y' in center_value:
        command = {'type': 'center', 'value': center_value}
    # N·∫øu gi√° tr·ªã l√† m·ªôt chu·ªói (vd: 'recenter') -> l·ªánh l·∫•y t·ª´ n√∫t b·∫•m
    elif isinstance(center_value, str):
        command = {'type': 'center', 'value': center_value}
    else:
        # N·∫øu kh√¥ng kh·ªõp, tr·∫£ v·ªÅ l·ªói
        return jsonify({'status': 'error', 'message': 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.'}), 400

    try:
        COMMAND_QUEUE.put_nowait(command)
        return jsonify({'status': 'success'})
    except queue.Full:
        return jsonify({'status': 'error', 'message': 'H√†ng ƒë·ª£i l·ªánh ƒëang ƒë·∫ßy.'}), 503

# <<< S·ª¨A ƒê·ªîI HO√ÄN TO√ÄN H√ÄM N√ÄY >>>
@pi_bp.route('/get_command')
def get_command():
    response_data = {
        'command': None,
        'timestamp': time.time() # Lu√¥n tr·∫£ v·ªÅ timestamp hi·ªán t·∫°i c·ªßa server
    }
    try:
        # L·∫•y l·ªánh t·ª´ h√†ng ƒë·ª£i n·∫øu c√≥
        command = COMMAND_QUEUE.get_nowait()
        response_data['command'] = command
    except queue.Empty:
        # N·∫øu kh√¥ng c√≥ l·ªánh, 'command' s·∫Ω v·∫´n l√† None
        pass
    
    return jsonify(response_data)