# controllers/pi_controller.py

from flask import Blueprint, request, jsonify, Response
import queue
import threading
import time
import base64
import os

from models import db, Shot

# T·∫°o m·ªôt Blueprint m·ªõi cho c√°c ch·ª©c nƒÉng li√™n quan ƒë·∫øn Pi
pi_bp = Blueprint('pi_bp', __name__)

# --- C√°c bi·∫øn tr·∫°ng th√°i s·∫Ω ƒë∆∞·ª£c qu·∫£n l√Ω trong blueprint n√†y ---
COMMAND_QUEUE = queue.Queue(maxsize=10)
pi_connected = False
last_heartbeat = 0
CURRENT_PI_CONFIG = {'zoom': 1.0, 'center': None}
latest_processed_data = {
    'time': '--:--:--', 'target': 'Ch∆∞a c√≥ k·∫øt qu·∫£', 'score': '--.-',
    'image_data': 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII='
}

# --- L·ªõp qu·∫£n l√Ω Livestream ---
class LivestreamManager:
    def __init__(self):
        self.frame = None
        self.lock = threading.Lock()
    def update_frame(self, frame):
        with self.lock:
            self.frame = frame
    def generate_frames_for_client(self):
        while True:
            with self.lock:
                if self.frame is None:
                    time.sleep(0.1)
                    continue
                frame_to_send = self.frame
            try:
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + frame_to_send + b'\r\n')
                time.sleep(1/30)
            except GeneratorExit:
                return

livestream_manager = LivestreamManager()

# --- C√°c API giao ti·∫øp v·ªõi Pi v√† Frontend ---

@pi_bp.route('/video_upload', methods=['POST'])
def video_upload():
    global pi_connected, last_heartbeat
    livestream_manager.update_frame(request.data)
    last_heartbeat = time.time()
    pi_connected = True
    return ('', 204)

# <<< S·ª¨A ƒê·ªîI HO√ÄN TO√ÄN H√ÄM N√ÄY >>>
@pi_bp.route('/processed_data_upload', methods=['POST'])
def processed_data_upload():
    global latest_processed_data
    data = request.get_json()
    
    if not data:
        return jsonify({'status': 'error', 'message': 'Invalid data'}), 400

    # C·∫≠p nh·∫≠t d·ªØ li·ªáu t·∫°m th·ªùi ƒë·ªÉ hi·ªÉn th·ªã ngay l·∫≠p t·ª©c tr√™n giao di·ªán
    latest_processed_data.update(data)
    
    # Logic l∆∞u v√†o database
    if 'active_session_id' in session and 'active_soldier_id' in session:
        try:
            # -- B∆∞·ªõc 1: X·ª≠ l√Ω v√† l∆∞u file ·∫£nh k·∫øt qu·∫£ --
            image_data = data.get('image_data')
            image_path = None
            if image_data:
                # T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ n·∫øu ch∆∞a c√≥
                output_dir = os.path.join('static', 'shot_results')
                os.makedirs(output_dir, exist_ok=True)
                
                # T·∫°o t√™n file duy nh·∫•t
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")
                filename = f"session_{session['active_session_id']}_soldier_{session['active_soldier_id']}_{timestamp}.jpg"
                image_path = os.path.join(output_dir, filename)
                
                # Gi·∫£i m√£ base64 v√† l∆∞u file
                with open(image_path, "wb") as f:
                    f.write(base64.b64decode(image_data))
                
                # C·∫≠p nh·∫≠t l·∫°i ƒë∆∞·ªùng d·∫´n ƒë·ªÉ client c√≥ th·ªÉ truy c·∫≠p
                # V√≠ d·ª•: static/shot_results/file.jpg -> /static/shot_results/file.jpg
                image_path = image_path.replace(os.path.sep, '/')


            # -- B∆∞·ªõc 2: T·∫°o ƒë·ªëi t∆∞·ª£ng Shot m·ªõi v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin --
            new_shot = Shot(
                session_id=session['active_session_id'],
                soldier_id=session['active_soldier_id'],
                score=data.get('score', 0),
                target_name=data.get('target', 'Kh√¥ng x√°c ƒë·ªãnh'),
                # Gi·∫£ s·ª≠ Pi s·∫Ω g·ª≠i v·ªÅ t·ªça ƒë·ªô ƒëi·ªÉm ch·∫°m trong t∆∞∆°ng lai
                hit_location_x=data.get('hit_location_x'),
                hit_location_y=data.get('hit_location_y'),
                result_image_path=image_path # L∆∞u ƒë∆∞·ªùng d·∫´n file ·∫£nh
            )
            
            # -- B∆∞·ªõc 3: L∆∞u v√†o database --
            db.session.add(new_shot)
            db.session.commit()
            print(f"üíæ ƒê√£ l∆∞u l·∫ßn b·∫Øn v√†o database cho session {session['active_session_id']}")

        except Exception as e:
            db.session.rollback()
            print(f"‚ùå L·ªói khi l∆∞u l·∫ßn b·∫Øn v√†o database: {e}")

    return jsonify({'status': 'success'})

# <<< TH√äM L·∫†I: Route ƒë·ªÉ tr√¨nh duy·ªát l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t >>>
@pi_bp.route('/data_feed')
def data_feed():
    return jsonify(latest_processed_data)


@pi_bp.route('/connection-status')
def connection_status():
    global pi_connected, last_heartbeat
    if time.time() - last_heartbeat > 5:
        pi_connected = False
    return jsonify({'status': 'connected' if pi_connected else 'disconnected'})

@pi_bp.route('/video_feed')
def video_feed():
    if not pi_connected:
        return Response("<h1>Thi·∫øt b·ªã kh√¥ng k·∫øt n·ªëi</h1>", mimetype='text/html')
    return Response(livestream_manager.generate_frames_for_client(), mimetype='multipart/x-mixed-replace; boundary=frame')

@pi_bp.route('/report_config', methods=['POST'])
def report_config():
    global CURRENT_PI_CONFIG
    data = request.get_json()
    if data:
        CURRENT_PI_CONFIG.update(data)
        return jsonify({'status': 'success'})
    return jsonify({'status': 'error'}), 400

@pi_bp.route('/get_current_config')
def get_current_config():
    return jsonify(CURRENT_PI_CONFIG)

@pi_bp.route('/set_zoom', methods=['POST'])
def set_zoom():
    data = request.get_json()
    zoom_level = data.get('zoom')
    if zoom_level:
        command = {'type': 'zoom', 'value': zoom_level}
        try:
            COMMAND_QUEUE.put_nowait(command)
            return jsonify({'status': 'success'})
        except queue.Full:
            return jsonify({'status': 'error', 'message': 'H√†ng ƒë·ª£i l·ªánh ƒëang ƒë·∫ßy.'}), 503
    return jsonify({'status': 'error', 'message': 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.'}), 400
    
@pi_bp.route('/set_center', methods=['POST'])
def set_center():
    data = request.get_json()
    center_coords = data.get('center')
    if center_coords and 'x' in center_coords and 'y' in center_coords:
        command = {'type': 'center', 'value': center_coords}
        try:
            COMMAND_QUEUE.put_nowait(command)
            return jsonify({'status': 'success'})
        except queue.Full:
            return jsonify({'status': 'error', 'message': 'H√†ng ƒë·ª£i l·ªánh ƒëang ƒë·∫ßy.'}), 503
    return jsonify({'status': 'error', 'message': 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.'}), 400

# <<< S·ª¨A ƒê·ªîI HO√ÄN TO√ÄN H√ÄM N√ÄY >>>
@pi_bp.route('/get_command')
def get_command():
    response_data = {
        'command': None,
        'timestamp': time.time() # Lu√¥n tr·∫£ v·ªÅ timestamp hi·ªán t·∫°i c·ªßa server
    }
    try:
        # L·∫•y l·ªánh t·ª´ h√†ng ƒë·ª£i n·∫øu c√≥
        command = COMMAND_QUEUE.get_nowait()
        response_data['command'] = command
    except queue.Empty:
        # N·∫øu kh√¥ng c√≥ l·ªánh, 'command' s·∫Ω v·∫´n l√† None
        pass
    
    return jsonify(response_data)