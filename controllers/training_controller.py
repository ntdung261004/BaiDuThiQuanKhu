# controllers/training_controller.py

from flask import Blueprint, request, jsonify, session
from models import db, Exercise, TrainingSession, Soldier, Shot, SessionStatus
from controllers.pi_controller import ACTIVE_SHOOTER_STATE, latest_processed_data
import time

training_bp = Blueprint('training_bp', __name__)

@training_bp.route('/api/exercises', methods=['GET'])
def get_exercises():
    try:
        exercises = Exercise.query.all()
        return jsonify([{'id': ex.id, 'exercise_name': ex.exercise_name} for ex in exercises])
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@training_bp.route('/api/training_sessions', methods=['POST'])
def create_training_session():
    data = request.get_json()
    exercise_id = data.get('exercise_id')
    session_name = data.get('session_name') or 'Phi√™n t·∫≠p' # D√πng 'or' ƒë·ªÉ c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh
    soldier_ids = data.get('soldier_ids') # Nh·∫≠n danh s√°ch ID chi·∫øn sƒ©

    # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if not exercise_id or not soldier_ids:
        return jsonify({'message': 'Thi·∫øu th√¥ng tin b√†i t·∫≠p ho·∫∑c danh s√°ch chi·∫øn sƒ©.'}), 400

    try:
        # T·∫°o m·ªôt phi√™n t·∫≠p m·ªõi
        new_session = TrainingSession(
            session_name=session_name, 
            exercise_id=exercise_id
        )
        
        # T√¨m c√°c ƒë·ªëi t∆∞·ª£ng Soldier t·ª´ danh s√°ch ID
        selected_soldiers = Soldier.query.filter(Soldier.id.in_(soldier_ids)).all()
        
        # Ki·ªÉm tra xem c√≥ t√¨m th·∫•y ƒë·ªß chi·∫øn sƒ© kh√¥ng
        if len(selected_soldiers) != len(soldier_ids):
            return jsonify({'message': 'M·ªôt ho·∫∑c nhi·ªÅu ID chi·∫øn sƒ© kh√¥ng h·ª£p l·ªá.'}), 400
            
        # Th√™m c√°c chi·∫øn sƒ© ƒë√£ ch·ªçn v√†o phi√™n t·∫≠p
        new_session.soldiers.extend(selected_soldiers)
        
        # L∆∞u v√†o database
        db.session.add(new_session)
        db.session.commit()
        
        return jsonify({'id': new_session.id, 'session_name': new_session.session_name}), 201
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': 'L·ªói server: ' + str(e)}), 500

@training_bp.route('/api/training_sessions', methods=['GET'])
def get_training_sessions():
    sessions = TrainingSession.query.order_by(TrainingSession.id.desc()).all()
    session_list = []
    for session in sessions:
        exercise_name = session.exercise.exercise_name if session.exercise else 'Kh√¥ng x√°c ƒë·ªãnh'
        session_list.append({
            'id': session.id, 
            'session_name': session.session_name, 
            'exercise_name': exercise_name,
            'status': session.status.name # .name s·∫Ω tr·∫£ v·ªÅ 'NOT_STARTED', 'IN_PROGRESS'...
        })
    return jsonify(session_list)

@training_bp.route('/api/training_sessions/<int:session_id>', methods=['DELETE'])
def delete_training_session(session_id):
    try:
        session = db.session.get(TrainingSession, session_id)
        if session is None:
            return jsonify({'message': 'Kh√¥ng t√¨m th·∫•y phi√™n t·∫≠p.'}), 404
        db.session.delete(session)
        db.session.commit()
        return jsonify({'message': 'ƒê√£ x√≥a phi√™n t·∫≠p th√†nh c√¥ng.'}), 200
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': 'L·ªói server: ' + str(e)}), 500

@training_bp.route('/api/training_sessions/<int:session_id>', methods=['PUT'])
def update_training_session(session_id):
    data = request.get_json()
    new_name = data.get('session_name')
    if not new_name:
        return jsonify({'message': 'T√™n m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.'}), 400
    try:
        session = db.session.get(TrainingSession, session_id)
        if session is None:
            return jsonify({'message': 'Kh√¥ng t√¨m th·∫•y phi√™n t·∫≠p.'}), 404
        session.session_name = new_name
        db.session.commit()
        return jsonify({'message': 'C·∫≠p nh·∫≠t t√™n phi√™n th√†nh c√¥ng.'}), 200
    except Exception as e:
        db.session.rollback()
        return jsonify({'message': 'L·ªói server: ' + str(e)}), 500
    
    # <<< TH√äM M·ªöI: API ƒë·ªÉ l·∫•y chi ti·∫øt m·ªôt phi√™n t·∫≠p >>>

@training_bp.route('/api/training_sessions/<int:session_id>', methods=['GET'])
def get_session_details(session_id):
    session_obj = db.session.get(TrainingSession, session_id)
    if not session_obj:
        return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y phi√™n t·∫≠p'}), 404

    soldiers_in_session = []
    for soldier in session_obj.soldiers:
        # ƒê·∫øm s·ªë l·∫ßn b·∫Øn c·ªßa chi·∫øn sƒ© n√†y TRONG phi√™n t·∫≠p n√†y
        shot_count = Shot.query.filter_by(session_id=session_id, soldier_id=soldier.id).count()
        soldiers_in_session.append({
            'id': soldier.id, 
            'name': soldier.name, 
            'rank': soldier.rank,
            'shot_count': shot_count # Th√™m s·ªë ph√°t b·∫Øn v√†o d·ªØ li·ªáu tr·∫£ v·ªÅ
        })
    
    session_details = {
        'id': session_obj.id,
        'session_name': session_obj.session_name,
        'exercise_name': session_obj.exercise.exercise_name,
        'soldiers': soldiers_in_session,
        'status': session_obj.status.name 
    }
    return jsonify(session_details)

@training_bp.route('/api/sessions/<int:session_id>/shots', methods=['GET'])
def get_session_shots(session_id):
    """API m·ªõi ƒë·ªÉ l·∫•y l·ªãch s·ª≠ b·∫Øn c·ªßa m·ªôt phi√™n."""
    session_obj = db.session.get(TrainingSession, session_id)
    if not session_obj:
        return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y phi√™n t·∫≠p'}), 404
        
    shots_history = []
    # S·∫Øp x·∫øp c√°c l·∫ßn b·∫Øn theo th·ªùi gian m·ªõi nh·∫•t l√™n ƒë·∫ßu
    shots = Shot.query.filter_by(session_id=session_id).order_by(Shot.shot_time.desc()).all()
    
    for shot in shots:
        shots_history.append({
            'id': shot.id,
            'score': shot.score,
            'shot_time': shot.shot_time.strftime('%H:%M:%S'),
            'target_name': shot.target_name,
            'soldier_name': shot.soldier.name,
            'soldier_rank': shot.soldier.rank
        })
    return jsonify(shots_history)

# API ƒë·ªÉ k√≠ch ho·∫°t x·∫° th·ªß ƒëang b·∫Øn >>>
@training_bp.route('/api/activate_shooter', methods=['POST'])
def activate_shooter():
    data = request.get_json()
    session_id = data.get('session_id')
    soldier_id = data.get('soldier_id')

    if not session_id or not soldier_id:
        return jsonify({'error': 'Thi·∫øu th√¥ng tin'}), 400

    # <<< S·ª¨A ƒê·ªîI LOGIC T·∫†I ƒê√ÇY >>>
    # Thay v√¨ l∆∞u v√†o session, h√£y c·∫≠p nh·∫≠t v√†o bi·∫øn tr·∫°ng th√°i to√†n c·ª•c
    ACTIVE_SHOOTER_STATE['session_id'] = session_id
    ACTIVE_SHOOTER_STATE['soldier_id'] = soldier_id
    ACTIVE_SHOOTER_STATE['heartbeat'] = time.time()
    
    # Reset l·∫°i d·ªØ li·ªáu c·ªßa ph√°t b·∫Øn cu·ªëi c√πng tr√™n server
    # ƒë·ªÉ tr√°nh client l·∫•y ph·∫£i d·ªØ li·ªáu c≈©
    latest_processed_data.update({
        'time': '--:--:--',
        'target': '--',
        'score': '--.-',
        'image_data': 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=',
        'shot_id': None # R·∫•t quan tr·ªçng ƒë·ªÉ tr√°nh race condition ·ªü frontend
    })
    
    soldier = db.session.get(Soldier, soldier_id)
    if soldier:
        print(f"üî´ ƒê√£ k√≠ch ho·∫°t x·∫° th·ªß: {soldier.rank} {soldier.name} cho phi√™n {session_id}")
        return jsonify({'status': 'success', 'message': f'ƒê√£ k√≠ch ho·∫°t x·∫° th·ªß {soldier.name}'})
    else:
        return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y chi·∫øn sƒ©'}), 404
    
@training_bp.route('/api/session/<int:session_id>/active_shooter', methods=['GET'])
def get_active_shooter_for_session(session_id):
    """
    API ƒë·ªÉ ki·ªÉm tra xem c√≥ x·∫° th·ªß n√†o ƒëang ho·∫°t ƒë·ªông cho phi√™n n√†y kh√¥ng.
    """
    active_session_id = ACTIVE_SHOOTER_STATE.get('session_id')
    active_soldier_id = ACTIVE_SHOOTER_STATE.get('soldier_id')

    # Ch·ªâ tr·∫£ v·ªÅ ID x·∫° th·ªß n·∫øu phi√™n ƒëang ho·∫°t ƒë·ªông kh·ªõp v·ªõi phi√™n ƒëang xem
    if active_session_id and int(active_session_id) == session_id:
        return jsonify({'active_soldier_id': active_soldier_id})
    
    return jsonify({'active_soldier_id': None})

# API ƒë·ªÉ k√≠ch ho·∫°t 1 phi√™n hu·∫•n luy·ªán m·ªõi >>>
@training_bp.route('/api/training_sessions/<int:session_id>/start', methods=['POST'])
def start_training_session(session_id):
    """
    API ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa m·ªôt phi√™n th√†nh IN_PROGRESS.
    """
    try:
        session_to_start = db.session.get(TrainingSession, session_id)
        if not session_to_start:
            return jsonify({'message': 'Kh√¥ng t√¨m th·∫•y phi√™n t·∫≠p.'}), 404

        # Ch·ªâ ƒë·ªïi tr·∫°ng th√°i n·∫øu phi√™n ch∆∞a b·∫Øt ƒë·∫ßu ƒë·ªÉ tr√°nh c√°c x·ª≠ l√Ω kh√¥ng c·∫ßn thi·∫øt
        if session_to_start.status == SessionStatus.NOT_STARTED:
            session_to_start.status = SessionStatus.IN_PROGRESS
            db.session.commit()
            print(f"‚úÖ Tr·∫°ng th√°i phi√™n #{session_id} ƒë√£ chuy·ªÉn th√†nh IN_PROGRESS.")
        
        return jsonify({'message': 'Phi√™n ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu.', 'status': 'IN_PROGRESS'}), 200

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå L·ªói khi b·∫Øt ƒë·∫ßu phi√™n: {e}")
        return jsonify({'message': 'L·ªói server: ' + str(e)}), 500

# API ƒë·ªÉ k·∫øt th√∫c 1 phi√™n hu·∫•n luy·ªán>>>  
@training_bp.route('/api/training_sessions/<int:session_id>/finish', methods=['POST'])
def finish_training_session(session_id):
    """
    API ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa m·ªôt phi√™n th√†nh COMPLETED.
    """
    try:
        session_to_finish = db.session.get(TrainingSession, session_id)
        if not session_to_finish:
            return jsonify({'message': 'Kh√¥ng t√¨m th·∫•y phi√™n t·∫≠p.'}), 404

        session_to_finish.status = SessionStatus.COMPLETED
        db.session.commit()
        print(f"‚úÖ Tr·∫°ng th√°i phi√™n #{session_id} ƒë√£ chuy·ªÉn th√†nh COMPLETED.")
        
        return jsonify({'message': 'Phi√™n ƒë√£ ƒë∆∞·ª£c k·∫øt th√∫c.', 'status': 'COMPLETED'}), 200

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå L·ªói khi k·∫øt th√∫c phi√™n: {e}")
        return jsonify({'message': 'L·ªói server: ' + str(e)}), 500
 
@training_bp.route('/api/deactivate_shooter', methods=['POST'])
def deactivate_shooter():
    """
    API ƒë·ªÉ h·ªßy k√≠ch ho·∫°t x·∫° th·ªß, reset tr·∫°ng th√°i v·ªÅ m·∫∑c ƒë·ªãnh.
    ƒê∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng r·ªùi kh·ªèi trang chi ti·∫øt phi√™n t·∫≠p.
    """
    global ACTIVE_SHOOTER_STATE
    ACTIVE_SHOOTER_STATE = {
        'session_id': None,
        'soldier_id': None,
        'heartbeat': 0
    }
    print("üî¥ X·∫° th·ªß ƒë√£ ƒë∆∞·ª£c h·ªßy k√≠ch ho·∫°t.")
    return jsonify({'status': 'deactivated'}), 200